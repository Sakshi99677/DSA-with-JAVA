## Self balancing binary tree ######################

            10                        5
           /  \                        \
          5    15                       7
               /                         \
              12 so on....                9.... this is a problem in binary tree.. hence we need self balancing tree

Define this(chain) problem:  
for every node h(l)-h(r)=-1,1,0 only

Solution is : self balancing binary tree

1. AVL tree (Adelson-Velskii and landis)

algorithm: 
1. Insert normally node n 
2. Start from node n & find the node that makes the tree unbalanced.
3.      p                                 c
       / \                               / \
      c  t3     right rotate           t1   p 
     / \                                   /  \
    t1  t2                                t2   t3   
using one of the 4 rules rotate

       let's see the rulesss:
       left-left case
       1.           p                                    c                  
                   / \                                  /  \             
                  c  t4                                g    p        
                 / \             right rotate         / \  / \                                               
                g  t3                                t1 t2 t3 t4 
               / \           
              t1  t2    
       
       2.       p                                         p                               g                                  
              /   \                                     /   \                           /   \                 
             c     t4                                  g     t4                        c     p             
           /   \              left-right case        /   \     ------------>         /  \   /  \                              
          t1    g                                   c    t3                         t1   t2 t3  t4
               /  \                               /   \                                                             
              t2   t3                            t1    t2                                                              
       
       3. Right right....> left 
       4. Right-left case -----> take in one single line like above then ----> left


## time complexity ##
It will be O(log(n)) to Insert
Rotation is constant O(n)
